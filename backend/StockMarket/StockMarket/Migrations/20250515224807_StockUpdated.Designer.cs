// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockMarket.Data;

#nullable disable

namespace StockMarket.Migrations
{
    [DbContext(typeof(SQLAppDbContext))]
    [Migration("20250515224807_StockUpdated")]
    partial class StockUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockMarket.Entities.SQL.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortfolioId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioId");

                    b.HasAlternateKey("UserId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.PortfolioStock", b =>
                {
                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<string>("StockSymbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PortfolioId", "StockSymbol");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("StockSymbol");

                    b.ToTable("PortfolioStocks");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.Stock", b =>
                {
                    b.Property<string>("symbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FullTimeEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longbusinesssummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("symbol");

                    b.HasIndex("Sector");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.Watchlist", b =>
                {
                    b.Property<int>("WatchlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WatchlistId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchlistId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("WatchlistId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.WatchlistStock", b =>
                {
                    b.Property<int>("WatchlistId")
                        .HasColumnType("int");

                    b.Property<string>("StockSymbol")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WatchlistId", "StockSymbol");

                    b.HasIndex("StockSymbol");

                    b.HasIndex("WatchlistId");

                    b.ToTable("WatchlistStocks");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.Portfolio", b =>
                {
                    b.HasOne("StockMarket.Entities.SQL.User", "User")
                        .WithOne("Portfolio")
                        .HasForeignKey("StockMarket.Entities.SQL.Portfolio", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.PortfolioStock", b =>
                {
                    b.HasOne("StockMarket.Entities.SQL.Portfolio", "Portfolio")
                        .WithMany("PortfolioStocks")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockMarket.Entities.SQL.Stock", "Stock")
                        .WithMany("PortfolioStocks")
                        .HasForeignKey("StockSymbol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.Watchlist", b =>
                {
                    b.HasOne("StockMarket.Entities.SQL.User", "User")
                        .WithOne("Watchlist")
                        .HasForeignKey("StockMarket.Entities.SQL.Watchlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.WatchlistStock", b =>
                {
                    b.HasOne("StockMarket.Entities.SQL.Stock", "Stock")
                        .WithMany("WatchlistStocks")
                        .HasForeignKey("StockSymbol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockMarket.Entities.SQL.Watchlist", "Watchlist")
                        .WithMany("WatchlistStocks")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.Portfolio", b =>
                {
                    b.Navigation("PortfolioStocks");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.Stock", b =>
                {
                    b.Navigation("PortfolioStocks");

                    b.Navigation("WatchlistStocks");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.User", b =>
                {
                    b.Navigation("Portfolio");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("StockMarket.Entities.SQL.Watchlist", b =>
                {
                    b.Navigation("WatchlistStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
